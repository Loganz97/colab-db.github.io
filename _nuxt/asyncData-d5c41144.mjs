import{l as C,r as u,m as b,p as P,q as g,w as O,s as k,u as A}from"./entry-02538bd7.mjs";const R=n=>C(n)?n:u(n),z=()=>null;function E(...n){var y,h,m,v,D,_,w;const f=typeof n[n.length-1]=="string"?n.pop():void 0;typeof n[0]!="string"&&n.unshift(f);let[t,l,e={}]=n;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof l!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=(y=e.server)!=null?y:!0,e.default=(h=e.default)!=null?h:z,e.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),e.lazy=(v=(m=e.lazy)!=null?m:e.defer)!=null?v:!1,e.initialCache=(D=e.initialCache)!=null?D:!0;const a=b(),i=k();if(i&&!i._nuxtOnBeforeMountCbs){const o=i._nuxtOnBeforeMountCbs=[];i&&(P(()=>{o.forEach(s=>{s()}),o.splice(0,o.length)}),g(()=>o.splice(0,o.length)))}const c=()=>e.initialCache&&a.payload.data[t]!==void 0,r={data:R((_=a.payload.data[t])!=null?_:e.default()),pending:u(!c()),error:u((w=a.payload._errors[t])!=null?w:null)};r.refresh=(o={})=>a._asyncDataPromises[t]?a._asyncDataPromises[t]:o._initial&&c()?a.payload.data[t]:(r.pending.value=!0,a._asyncDataPromises[t]=Promise.resolve(l(a)).then(s=>{e.transform&&(s=e.transform(s)),e.pick&&(s=B(s,e.pick)),r.data.value=s,r.error.value=null}).catch(s=>{r.error.value=s,r.data.value=A(e.default())}).finally(()=>{r.pending.value=!1,a.payload.data[t]=r.data.value,r.error.value&&(a.payload._errors[t]=!0),delete a._asyncDataPromises[t]}),a._asyncDataPromises[t]);const d=()=>r.refresh({_initial:!0}),x=e.server!==!1&&a.payload.serverRendered;{x&&a.isHydrating&&t in a.payload.data?r.pending.value=!1:i&&a.payload.serverRendered&&(a.isHydrating||e.lazy)?i._nuxtOnBeforeMountCbs.push(d):d(),e.watch&&O(e.watch,()=>r.refresh());const o=a.hook("app:data:refresh",s=>{if(!s||s.includes(t))return r.refresh()});i&&g(o)}const p=Promise.resolve(a._asyncDataPromises[t]).then(()=>r);return Object.assign(p,r),p}function H(n){const f=n?Array.isArray(n)?n:[n]:void 0;return b().callHook("app:data:refresh",f)}function B(n,f){const t={};for(const l of f)t[l]=n[l];return t}export{H as r,E as u,R as w};
